!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/45968eff/
ALERT	logger.go	/^const ALERT = Severity('1')$/;"	c	package:logger
AddPrefix	logger.go	/^func AddPrefix(key string, value string) {$/;"	f	package:logger
Alert	alert.go	/^func Alert(fields ...interface{}) {$/;"	f	package:logger
AlertErr	alert.go	/^func AlertErr(err error) {$/;"	f	package:logger
CRITICAL	logger.go	/^const CRITICAL = Severity('2')$/;"	c	package:logger
Critical	critical.go	/^func Critical(fields ...interface{}) {$/;"	f	package:logger
CriticalErr	critical.go	/^func CriticalErr(err error) {$/;"	f	package:logger
DEBUG	logger.go	/^const DEBUG = Severity('7')$/;"	c	package:logger
Debug	debug.go	/^func Debug(fields ...interface{}) {$/;"	f	package:logger
DebugErr	debug.go	/^func DebugErr(err error) {$/;"	f	package:logger
EMERGENCY	logger.go	/^const EMERGENCY = Severity('0')$/;"	c	package:logger
ERROR	logger.go	/^const ERROR = Severity('3')$/;"	c	package:logger
Emergency	emergency.go	/^func Emergency(fields ...interface{}) {$/;"	f	package:logger
EmergencyErr	emergency.go	/^func EmergencyErr(err error) {$/;"	f	package:logger
Error	error.go	/^func Error(fields ...interface{}) {$/;"	f	package:logger
ErrorErr	error.go	/^func ErrorErr(err error) {$/;"	f	package:logger
INFO	logger.go	/^const INFO = Severity('6')$/;"	c	package:logger
Info	info.go	/^func Info(fields ...interface{}) {$/;"	f	package:logger
InfoErr	info.go	/^func InfoErr(err error) {$/;"	f	package:logger
Initialize	logger.go	/^func Initialize(logLevel Severity, writers ...io.Writer) {$/;"	f	package:logger
NOTICE	logger.go	/^const NOTICE = Severity('5')$/;"	c	package:logger
Notice	notice.go	/^func Notice(fields ...interface{}) {$/;"	f	package:logger
NoticeErr	notice.go	/^func NoticeErr(err error) {$/;"	f	package:logger
SetTimestampEnabled	logger.go	/^func SetTimestampEnabled(enabled bool) {$/;"	f	package:logger
Severity	logger.go	/^type Severity rune$/;"	t	package:logger
WARN	logger.go	/^const WARN = Severity('4')$/;"	c	package:logger
Warn	warn.go	/^func Warn(fields ...interface{}) {$/;"	f	package:logger
WarnErr	warn.go	/^func WarnErr(err error) {$/;"	f	package:logger
alert	logger.go	/^const alert = levelByte(1)$/;"	c	package:logger
buf	logger.go	/^var buf bytes.Buffer$/;"	v	package:logger
closeBracket	logger.go	/^const closeBracket = '>'$/;"	c	package:logger
critical	logger.go	/^const critical = levelByte(2)$/;"	c	package:logger
debug	logger.go	/^const debug = levelByte(7)$/;"	c	package:logger
emergency	logger.go	/^const emergency = levelByte(0)$/;"	c	package:logger
equals	logger.go	/^const equals = '='$/;"	c	package:logger
err	logger.go	/^const err = levelByte(3)$/;"	c	package:logger
info	logger.go	/^const info = levelByte(6)$/;"	c	package:logger
level	logger.go	/^var level = debug$/;"	v	package:logger
levelByte	logger.go	/^type levelByte uint8$/;"	t	package:logger
logger	alert.go	/^package logger$/;"	p
logger	critical.go	/^package logger$/;"	p
logger	debug.go	/^package logger$/;"	p
logger	emergency.go	/^package logger$/;"	p
logger	error.go	/^package logger$/;"	p
logger	info.go	/^package logger$/;"	p
logger	logger.go	/^package logger$/;"	p
logger	notice.go	/^package logger$/;"	p
logger	warn.go	/^package logger$/;"	p
msgLevel	logger.go	/^var msgLevel = DEBUG$/;"	v	package:logger
mutex	logger.go	/^var mutex sync.Mutex$/;"	v	package:logger
newline	logger.go	/^const newline = '\\n'$/;"	c	package:logger
notice	logger.go	/^const notice = levelByte(5)$/;"	c	package:logger
openBracket	logger.go	/^const openBracket = '<'$/;"	c	package:logger
prefix	logger.go	/^var prefix bytes.Buffer$/;"	v	package:logger
prefixMap	logger.go	/^var prefixMap map[string]string$/;"	v	package:logger
shouldWrite	logger.go	/^func shouldWrite(myLevel levelByte) bool {$/;"	f	package:logger	typeref:typename:bool
space	logger.go	/^const space = ' '$/;"	c	package:logger
timestampEnabled	logger.go	/^var timestampEnabled = false$/;"	v	package:logger
warn	logger.go	/^const warn = levelByte(4)$/;"	c	package:logger
writeLine	logger.go	/^func writeLine(level levelByte, severity Severity, fields ...interface{}) {$/;"	f	package:logger
writer	logger.go	/^var writer io.Writer$/;"	v	package:logger
